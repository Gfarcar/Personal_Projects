// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using authbackend.Data;

#nullable disable

namespace authBackEnd.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20241004155752_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("authbackend.Entities.AppClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Claims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "CanManageUsers",
                            Value = "true"
                        },
                        new
                        {
                            Id = 2,
                            Type = "CanEditSettings",
                            Value = "true"
                        },
                        new
                        {
                            Id = 3,
                            Type = "CanCreateContent",
                            Value = "true"
                        },
                        new
                        {
                            Id = 4,
                            Type = "CanEditContent",
                            Value = "true"
                        },
                        new
                        {
                            Id = 6,
                            Type = "CanViewContent",
                            Value = "true"
                        },
                        new
                        {
                            Id = 7,
                            Type = "CanModerateContent",
                            Value = "true"
                        },
                        new
                        {
                            Id = 8,
                            Type = "CanBanUsers",
                            Value = "true"
                        });
                });

            modelBuilder.Entity("authbackend.Entities.HorasTrabajadas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("Horas")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HorasTrabajadas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 6,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 7,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 8,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 9,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 6,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 7,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 8,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 7,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 8,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 9,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 6,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 7,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            Fecha = new DateOnly(2024, 1, 31),
                            Horas = 8,
                            UserId = 15
                        });
                });

            modelBuilder.Entity("authbackend.Entities.Nomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Mes")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Nominas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 3377,
                            Mes = new DateOnly(2024, 1, 1)
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 3656,
                            Mes = new DateOnly(2024, 2, 1)
                        },
                        new
                        {
                            Id = 3,
                            Cantidad = 2503,
                            Mes = new DateOnly(2024, 3, 1)
                        },
                        new
                        {
                            Id = 4,
                            Cantidad = 9722,
                            Mes = new DateOnly(2024, 4, 1)
                        },
                        new
                        {
                            Id = 5,
                            Cantidad = 5409,
                            Mes = new DateOnly(2024, 5, 1)
                        },
                        new
                        {
                            Id = 6,
                            Cantidad = 9961,
                            Mes = new DateOnly(2024, 6, 1)
                        },
                        new
                        {
                            Id = 7,
                            Cantidad = 4853,
                            Mes = new DateOnly(2024, 7, 1)
                        },
                        new
                        {
                            Id = 8,
                            Cantidad = 3020,
                            Mes = new DateOnly(2024, 8, 1)
                        },
                        new
                        {
                            Id = 9,
                            Cantidad = 5529,
                            Mes = new DateOnly(2024, 9, 1)
                        },
                        new
                        {
                            Id = 10,
                            Cantidad = 2683,
                            Mes = new DateOnly(2024, 10, 1)
                        },
                        new
                        {
                            Id = 11,
                            Cantidad = 6661,
                            Mes = new DateOnly(2024, 11, 1)
                        },
                        new
                        {
                            Id = 12,
                            Cantidad = 1193,
                            Mes = new DateOnly(2024, 12, 1)
                        });
                });

            modelBuilder.Entity("authbackend.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Editor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Viewer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moderator"
                        });
                });

            modelBuilder.Entity("authbackend.Entities.RoleClaim", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AppClaimId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "ClaimType");

                    b.HasIndex("AppClaimId");

                    b.ToTable("RoleClaim", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            ClaimType = "CanManageUsers",
                            ClaimValue = "true"
                        },
                        new
                        {
                            RoleId = 1,
                            ClaimType = "CanEditSettings",
                            ClaimValue = "true"
                        },
                        new
                        {
                            RoleId = 2,
                            ClaimType = "CanCreateContent",
                            ClaimValue = "true"
                        },
                        new
                        {
                            RoleId = 2,
                            ClaimType = "CanEditContent",
                            ClaimValue = "true"
                        },
                        new
                        {
                            RoleId = 2,
                            ClaimType = "CanDeleteContent",
                            ClaimValue = "true"
                        },
                        new
                        {
                            RoleId = 3,
                            ClaimType = "CanViewContent",
                            ClaimValue = "true"
                        },
                        new
                        {
                            RoleId = 4,
                            ClaimType = "CanModerateContent",
                            ClaimValue = "true"
                        },
                        new
                        {
                            RoleId = 4,
                            ClaimType = "CanBanUsers",
                            ClaimValue = "true"
                        });
                });

            modelBuilder.Entity("authbackend.Entities.Salario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Salarios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 1500.00m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 1600.00m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 1700.00m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 1800.00m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 1900.00m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2000.00m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2100.00m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2200.00m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2300.00m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2400.00m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2500.00m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2600.00m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2700.00m,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2800.00m,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            Fecha = new DateOnly(2024, 1, 31),
                            Monto = 2900.00m,
                            UserId = 15
                        });
                });

            modelBuilder.Entity("authbackend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ana.martinezgomez@example.com",
                            LastName = "Martinez",
                            Names = "Ana Luisa",
                            PasswordHash = "$2a$11$8GbFzvTb685Mw/gHz8GA0O6hWagtc9OqGFqIAkssX5wjRaO2s3kYK",
                            SecondLastName = "Gomez"
                        },
                        new
                        {
                            Id = 2,
                            Email = "carla.gomezlopez@example.com",
                            LastName = "Gomez",
                            Names = "Carla",
                            PasswordHash = "$2a$11$TvUDqiOqoVB6k7ezCzL1..ANocmRX8zKC7zWBUYdRcPwbMEnpJk.q",
                            SecondLastName = "Lopez"
                        },
                        new
                        {
                            Id = 3,
                            Email = "miguel.torresramirez@example.com",
                            LastName = "Torres",
                            Names = "Miguel",
                            PasswordHash = "$2a$11$Ss92CixVmKHzXDwbIUQyq.EQqj0Zjtp3willndK/enm4sJhjVxjQy",
                            SecondLastName = "Ramirez"
                        },
                        new
                        {
                            Id = 4,
                            Email = "laura.rodriguezfernandez@example.com",
                            LastName = "Rodriguez",
                            Names = "Laura",
                            PasswordHash = "$2a$11$bafwibzDQ.FlrN5uvoHYPOOzC7KnganzKFIiqbMMG.I7c8H9JmW0K",
                            SecondLastName = "Fernandez"
                        },
                        new
                        {
                            Id = 5,
                            Email = "juan.sanchezmartinez@example.com",
                            LastName = "Sanchez",
                            Names = "Juan Carlos",
                            PasswordHash = "$2a$11$21fu9PLRgBD5JjpOCILP1u2a09u0iPtYu1ppYXV/Ae3qgXi4DtAie",
                            SecondLastName = "Martinez"
                        },
                        new
                        {
                            Id = 6,
                            Email = "sofia.ramirezcastillo@example.com",
                            LastName = "Ramirez",
                            Names = "Sofia",
                            PasswordHash = "$2a$11$DDY9mGl/lxqGIf2xg15dFOlnndeiCHw04F525RF1jYWVrFrZ.qUYi",
                            SecondLastName = "Castillo"
                        },
                        new
                        {
                            Id = 7,
                            Email = "andres.lopezcastro@example.com",
                            LastName = "Lopez",
                            Names = "Andres",
                            PasswordHash = "$2a$11$MOXMZDGvybd/wwWVdR//tO9GCyYE5.9Ytkiqz3CNte0BRwubUyrvO",
                            SecondLastName = "Castro"
                        },
                        new
                        {
                            Id = 8,
                            Email = "valentina.castroperez@example.com",
                            LastName = "Castro",
                            Names = "Valentina",
                            PasswordHash = "$2a$11$OPEC7dJt2gKWQpQTxOjk1eijTz8bW1APV/Bsf/8Z0e/Pqkvvi.n/6",
                            SecondLastName = "Perez"
                        },
                        new
                        {
                            Id = 9,
                            Email = "pedro.jimenezmorales@example.com",
                            LastName = "Jimenez",
                            Names = "Pedro",
                            PasswordHash = "$2a$11$3C1yL94Yj3/skILDJEWu1u3834GDRYtBxvl0WSsXdeA6CtFAV.WJq",
                            SecondLastName = "Morales"
                        },
                        new
                        {
                            Id = 10,
                            Email = "mariana.diaherrera@example.com",
                            LastName = "Diaz",
                            Names = "Mariana",
                            PasswordHash = "$2a$11$B5vGwBU6isSGLkmh7a7FUeR0eVnPiOPtyGEsJxKrsQGqJ.V5B1FvC",
                            SecondLastName = "Herrera"
                        },
                        new
                        {
                            Id = 11,
                            Email = "javier.moralesjimenez@example.com",
                            LastName = "Morales",
                            Names = "Javier",
                            PasswordHash = "$2a$11$Sng6dX9jQ0GzwgtpFzaib.Iz/j73/M94HJZKlfUzhiIZrVbL1akm.",
                            SecondLastName = "Jimenez"
                        },
                        new
                        {
                            Id = 12,
                            Email = "gabriela.fernandeztorres@example.com",
                            LastName = "Fernandez",
                            Names = "Gabriela",
                            PasswordHash = "$2a$11$JzGFen3SJ330.Km0fUtLS.0Pgqgo1BxHDl85ErC9ItTB6XaNR8tNS",
                            SecondLastName = "Torres"
                        },
                        new
                        {
                            Id = 13,
                            Email = "tomas.herrera.mendoza@example.com",
                            LastName = "Herrera",
                            Names = "Tomas",
                            PasswordHash = "$2a$11$x59/dB5GtmCfbw9MNvzuv.LxabN3R/JcXOmVbFL6M4SQ4TtX/sS/S",
                            SecondLastName = "Mendoza"
                        },
                        new
                        {
                            Id = 14,
                            Email = "natalia.mendozarodriguez@example.com",
                            LastName = "Mendoza",
                            Names = "Natalia",
                            PasswordHash = "$2a$11$pQDPSJvwD08mDb08fPl3B.Im/a5bTCAKWwUraFqqGQBJhLBSYONSC",
                            SecondLastName = "Rodriguez"
                        },
                        new
                        {
                            Id = 15,
                            Email = "fernando.ruizsanchez@example.com",
                            LastName = "Ruiz",
                            Names = "Luis Fernando",
                            PasswordHash = "$2a$11$BYx2qOa3O/l041Xjr7SK2.r.6e2HQkOKMRFYYvJqRcDD/ViQhdxUy",
                            SecondLastName = "Sanchez"
                        });
                });

            modelBuilder.Entity("authbackend.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "CanManageUsers",
                            ClaimValue = "true",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "CanEditSettings",
                            ClaimValue = "true",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "CanCreateContent",
                            ClaimValue = "true",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "CanEditContent",
                            ClaimValue = "true",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "CanDeleteContent",
                            ClaimValue = "true",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "CanViewContent",
                            ClaimValue = "true",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "CanModerateContent",
                            ClaimValue = "true",
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "CanBanUsers",
                            ClaimValue = "true",
                            UserId = 4
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "CanViewContent",
                            ClaimValue = "true",
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "CanCreateContent",
                            ClaimValue = "true",
                            UserId = 6
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "CanEditContent",
                            ClaimValue = "true",
                            UserId = 6
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "CanDeleteContent",
                            ClaimValue = "true",
                            UserId = 6
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "CanViewContent",
                            ClaimValue = "true",
                            UserId = 7
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "CanModerateContent",
                            ClaimValue = "true",
                            UserId = 8
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "CanViewContent",
                            ClaimValue = "true",
                            UserId = 9
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "CanCreateContent",
                            ClaimValue = "true",
                            UserId = 10
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "CanEditContent",
                            ClaimValue = "true",
                            UserId = 10
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "CanViewContent",
                            ClaimValue = "true",
                            UserId = 11
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "CanModerateContent",
                            ClaimValue = "true",
                            UserId = 12
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "CanViewContent",
                            ClaimValue = "true",
                            UserId = 13
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "CanCreateContent",
                            ClaimValue = "true",
                            UserId = 14
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "CanManageUsers",
                            ClaimValue = "true",
                            UserId = 15
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "CanEditSettings",
                            ClaimValue = "true",
                            UserId = 15
                        });
                });

            modelBuilder.Entity("authbackend.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("authbackend.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("authbackend.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("authbackend.Entities.HorasTrabajadas", b =>
                {
                    b.HasOne("authbackend.Entities.User", "User")
                        .WithMany("HorasTrabajadas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("authbackend.Entities.RoleClaim", b =>
                {
                    b.HasOne("authbackend.Entities.AppClaim", null)
                        .WithMany("RoleClaims")
                        .HasForeignKey("AppClaimId");

                    b.HasOne("authbackend.Entities.Role", "Role")
                        .WithMany("RoleClaim")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("authbackend.Entities.Salario", b =>
                {
                    b.HasOne("authbackend.Entities.User", "User")
                        .WithMany("Salarios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("authbackend.Entities.UserClaim", b =>
                {
                    b.HasOne("authbackend.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("authbackend.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("authbackend.Entities.User", "User")
                        .WithMany("UserRefreshToken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("authbackend.Entities.UserRole", b =>
                {
                    b.HasOne("authbackend.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("authbackend.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("authbackend.Entities.UserToken", b =>
                {
                    b.HasOne("authbackend.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("authbackend.Entities.AppClaim", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("authbackend.Entities.Role", b =>
                {
                    b.Navigation("RoleClaim");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("authbackend.Entities.User", b =>
                {
                    b.Navigation("HorasTrabajadas");

                    b.Navigation("Salarios");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRefreshToken");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
